#+title: Lvm

* Table of Contents :TOC:
- [[#what-is-lvm][What is LVM?]]
  - [[#file-system-fd-files-and-special-files][File System (fd), Files and Special Files]]
  - [[#device-mapper][Device mapper]]
  - [[#lvm---logical-volume-manager][LVM - logical volume manager]]
  - [[#lvm-design][LVM Design]]
- [[#commands][Commands]]
  - [[#lsblk---list-block-devices][lsblk - list block devices]]
  - [[#fdisk---manipulate-disk-partition-table][fdisk - manipulate disk partition table]]
  - [[#parted][parted]]

* What is LVM?
[[https://en.wikipedia.org/wiki/Logical_volume_management][LVM wikipedia]]
** File System (fd), Files and Special Files
*** Special files
[[https://en.wikipedia.org/wiki/Device_file][Device file wikipedia]]
- interface to a device driver that appears in a *file system* as if it were an ordinary *file*
  - a *[[https://en.wikipedia.org/wiki/Computer_file][file]]* shall be understood as a resource for recording data, identifiable by a name and can be shared and transferred
  - a *[[https://en.wikipedia.org/wiki/File_system][file system]]* governs *file* organization and access
    - /local/ - a capability of the OS
    - /distributed/ - file access between networked computers
  - a *[[https://en.wikipedia.org/wiki/Device_driver][device driver]]*, is a computer program
    - controls a particular type of device
    - provide abstraction (translater between hw and applications)
- the idea is that a device appears as a file, meaning that the interaction with it, it via standard *input/output* system calls
- 2 general kinds of devices files (*device special files*)
  - [[*Block devices (also Block special files)][Block devices (also Block special files)]]
  - [[*Character devices][Character devices]]
- other special files
  - [[https://en.wikipedia.org/wiki/Named_pipe][named pipe]], [[https://en.wikipedia.org/wiki/Unix_domain_socket][sockets]], [[https://en.wikipedia.org/wiki/Symbolic_link][symbolic links]]
**** Usage
- usually simple interfaces to standard devices (*printer*, *serial ports*)
- also access unique resources on a device (*disk partitions*)
- access resources that don't have a device (*data sinks*, *random number generator*)
*** Character devices
[[https://en.wikipedia.org/wiki/Device_file#Character_devices][Character devices wikipedia]]
- unbuffered, direct access to hardware device
- not necessarily allow programs to read or write single characters at a time
  - e.g. hd require that all reads and writes be aligned to block boundaries
*** Block devices (also Block special files)
[[https://en.wikipedia.org/wiki/Device_file#BLOCKDEV][block devices wikipedia]]
- provide
  - buffered access to hardware devices (in contrast to character devices)
  - some abstraction from their specifics
- allow to *read* or *write* a [[https://en.wikipedia.org/wiki/Block_(data_storage)][block]] of any size and any alignment
  - in computing a block refers to a sequence of bytes (or bits)
  - a number of *physical records*
  - usually stored in a *data buffer*
  - reduces overhead, speeds up handling of *data stream*
  - alignment refers to the position wihtin the storage medium
- downside
  - possible data corruption while buffering
- *FreeBSD* - only character devices
- *Linux* - only block-devices
  - would need to open the device with =O_DIRECT=
- most file systems are based on block devices
*** Pseudo devices (on UNIX)
- =/dev/null= ... accepts and discards all input written to it, provides =EOF= indication when read from
- =/dev/zero= ... accepts and discards all input written to it; produces a continuous stream of null characters (zero-value bytes) as output when read from.
- =/dev/full= ... produces a continuous stream of null characters (zero-value bytes) as output when read from, and generates an ENOSPC ("disk full") error when attempt to write
- =/dev/random= ... produces bytes generated by the kernel's cryptographically secure pseudorandom number generator.
- =/dev/stdin=, =/dev/stdout=, =/dev/stderr= ... access the process's standard streams.
- =/ddev/fd/n= ... accesses the process's file descriptor n.
** Device mapper
- framework that maps physical *block devices* onto higher-level /virtual block devices/
- foundation for *LVM*, *RAID*, *dm-crypt*
- offers features such as *file system snapshots*
- passing data from a /virtual block device/ (provided by the device mapper itself) to another block device
- during transition, data can also be modified (e.g. encryption)
*** Usage
- Apps talk to device mapper (via =libdevmapper.so= shared library)
  - e.g. creation of new mapped devicesj
- device mapper issues =ioctls= to =/dev/mapper/control/= [[*Special files][device node]]
- configuration of device mapper via [[https://man.cx/?page=dmsetup(8)][dmsetup]]
** LVM - logical volume manager
- more flexible way of doing [[https://en.wikipedia.org/wiki/Disk_partitioning][partitioning]]
- concatenate, [[https://en.wikipedia.org/wiki/Data_striping][stripe]], combine partitions into larger virtual partitions
- administrators can re-size or move them, potenttially without interrupting system use
- part of the *device driver stack*  inside an OS
** LVM Design
*** PV - physical volumes
- hard disks, hard disk partitions, Logical Unit Numbers
- VolManagement treats each *PV* as a sequence of chunks called *physical extents* (=PEs=)
- PE's map one-to-one to *logical extents* =LEs=
*** volume groups
- LEs are pooled into a /volume group/ (combining extents)
- pooled LEs can be concatenated into virtual disk partitions (*logical volumes*)
* Commands
** lsblk - list block devices
#+begin_example
NAME                    MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
nvme0n1                 259:0    0 476.9G  0 disk
├─nvme0n1p1             259:1    0   500M  0 part
├─nvme0n1p2             259:2    0   500M  0 part  /boot
├─nvme0n1p3             259:3    0   420G  0 part
│ └─volgroup0           254:0    0   420G  0 crypt
│   ├─volgroup0-lv_root 254:1    0    50G  0 lvm   /
│   └─volgroup0-lv_home 254:2    0   370G  0 lvm   /home
└─nvme0n1p4             259:4    0    56G  0 part  /mnt/backups
#+end_example
** fdisk - manipulate disk partition table
#+begin_example
Disk /dev/nvme0n1: 476.94 GiB, 512110190592 bytes, 1000215216 sectors
Disk model: SAMSUNG MZAL4512HBLU-00BL2
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt

Device             Start        End   Sectors  Size Type
/dev/nvme0n1p1      2048    1026047   1024000  500M EFI System
/dev/nvme0n1p2   1026048    2050047   1024000  500M Linux filesystem
/dev/nvme0n1p3   2050048  882853887 880803840  420G Linux LVM
/dev/nvme0n1p4 882853888 1000214527 117360640   56G Linux filesystem


Disk /dev/mapper/volgroup0: 419.98 GiB, 450954788864 bytes, 880771072 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/mapper/volgroup0-lv_root: 50 GiB, 53687091200 bytes, 104857600 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/mapper/volgroup0-lv_home: 369.98 GiB, 397263503360 bytes, 775905280 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
#+end_example
** parted
